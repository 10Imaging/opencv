diff --git a/modules/stitching/src/blenders.cpp b/modules/stitching/src/blenders.cpp
index 0417a4c92..e14f1b720 100644
--- a/modules/stitching/src/blenders.cpp
+++ b/modules/stitching/src/blenders.cpp
@@ -127,9 +127,12 @@ void Blender::blend(InputOutputArray dst, InputOutputArray dst_mask)
     UMat mask;
     compare(dst_mask_, 0, mask, CMP_EQ);
     dst_.setTo(Scalar::all(0), mask);
+    mask.release();
+
     dst.assign(dst_);
-    dst_mask.assign(dst_mask_);
     dst_.release();
+
+    dst_mask.assign(dst_mask_);
     dst_mask_.release();
 }
 
@@ -490,6 +493,8 @@ void MultiBandBlender::feed(InputArray _img, InputArray mask, Point tl)
     UMat img_with_border;
     copyMakeBorder(_img, img_with_border, top, bottom, left, right,
                    BORDER_REFLECT);
+    img.release();
+
     LOGLN("  Add border to the source image, time: " << ((getTickCount() - t) / getTickFrequency()) << " sec");
 #if ENABLE_LOG
     t = getTickCount();
@@ -498,6 +503,8 @@ void MultiBandBlender::feed(InputArray _img, InputArray mask, Point tl)
     std::vector<UMat> src_pyr_laplace;
     createLaplacePyr(img_with_border, num_bands_, src_pyr_laplace);
 
+    img_with_border.release();
+
     LOGLN("  Create the source image Laplacian pyramid, time: " << ((getTickCount() - t) / getTickFrequency()) << " sec");
 #if ENABLE_LOG
     t = getTickCount();
@@ -520,6 +527,7 @@ void MultiBandBlender::feed(InputArray _img, InputArray mask, Point tl)
     }
 
     copyMakeBorder(weight_map, weight_pyr_gauss[0], top, bottom, left, right, BORDER_CONSTANT);
+    weight_map.release();
 
     for (int i = 0; i < num_bands_; ++i)
         pyrDown(weight_pyr_gauss[i], weight_pyr_gauss[i + 1]);
@@ -603,6 +611,16 @@ void MultiBandBlender::feed(InputArray _img, InputArray mask, Point tl)
 void MultiBandBlender::blend(InputOutputArray dst, InputOutputArray dst_mask)
 {
     Rect dst_rc(0, 0, dst_roi_final_.width, dst_roi_final_.height);
+    compare(dst_band_weights_[0](dst_rc), WEIGHT_EPS, dst_mask, CMP_GT);
+    dst_band_weights_.clear();
+
+    //Instead of calling Blender::blend(dst, dst_mask); perform code inline in order to avoid memory intensive copies
+    dst.assign(dst_pyr_laplace_[0](dst_rc));
+    dst_pyr_laplace_.clear();
+    UMat mask;
+    compare(dst_mask, 0, mask, CMP_EQ);
+    dst.setTo(Scalar::all(0), mask);
+
 #if defined(HAVE_OPENCV_CUDAARITHM) && defined(HAVE_OPENCV_CUDAWARPING)
     if (can_use_gpu_)
     {
